#!/bin/bash
#
# Copyright (C) 2011-2012 Cyril Bouthors <cyril@boutho.rs>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#

set -e
set -o pipefail
rc=0
raid_detected=0

export PATH=$PATH:/sbin:/usr/sbin

# Check software RAID
if [ -f /proc/mdstat ]
then
    for md in /dev/md*
    do
	[ ! -e $md -o -d $md ] && continue

	grep -q $(basename $md) /proc/mdstat || continue

	raid_detected=1
	if mdadm --detail --test $md >/dev/null 2>/dev/null
	then
	    echo -n "$md: OK. "
	else
	    echo -n "$md: "
	    mdadm --detail --test $md 2>&1 |grep faulty \
		| sed -e s/.*faulty/faulty/g | tr -d "\n" || true
	    echo -n '. '
	    rc=2
	fi
    done
fi

# Check mptsas RAID
if [ -f /proc/modules ] && grep -wFq mptsas /proc/modules
then
    if ! which mpt-status >/dev/null
    then
	echo "$0: unable to find mpt-status"
	exit 2
    fi

    for status_id in $(mpt-status -p | awk -F ' |,|=' '/^Found / {print $4}')
    do
	raid_detected=1
	for status in $(mpt-status -s -i $status_id | awk '/^log_id / {print $3}')
	do
	    echo -n "MPT status $status. "
	    if [ "$status" != 'OPTIMAL' ]
	    then
		rc=2
	    fi
	done
    done
fi

# Check mpt2sas RAID
if [ -f /proc/modules ] && grep -wFq mpt2sas /proc/modules
then
    if ! which sas2ircu >/dev/null
    then
	echo "$0: unable to find sas2ircu"
	exit 2
    fi
    for status in $(sas2ircu 0 STATUS | awk '/Volume state/ {print $4}')
    do
	raid_detected=1
	echo -n "IRCU status $status. "
	if [ "$status" != 'Optimal' ]
	then
	    rc=2
	fi
    done
fi

# Check 3w_xxxx RAID
if [ -f /proc/modules ] && grep -wFq 3w_xxxx /proc/modules
then
    if ! which tw-cli >/dev/null
    then
	echo "$0: unable to find tw-cli"
	exit 2
    fi
    tw_controller_id=$(tw-cli show | grep -vE '^$' | tail -1 | cut -f1 -d' ')
    for status in $(tw-cli /$tw_controller_id show | awk '/^u/ {print $3}')
    do
	raid_detected=1
	echo -n "3w_xxxx status $status. "
	if [ "$status" != 'OK' -a "$status" != 'VERIFYING' ]
	then
	    rc=2
	fi
    done
fi

# Check megaraid_sas RAID
if [ -f /proc/modules ] && grep -wFq megaraid_sas /proc/modules
then
    if ! which megasasctl >/dev/null
    then
	echo "$0: unable to find megasasctl"
	exit 2
    fi
    for status in $(megasasctl | awk '/ RAID / {print $6}')
    do
	raid_detected=1
	echo -n "megasasctl status $status. "
	if [ "$status" != 'optimal' ]
	then
	    rc=2
	fi
    done
fi

# cciss support with array-info
if [ -f /proc/modules ] && grep -wFq cciss /proc/modules && [ -d /dev/cciss/ ]
then
    if ! which array-info >/dev/null
    then
	echo "$0: unable to find array-info"
	exit 2
    fi

    for status in $(array-info -d /dev/cciss/c0d0 -a | awk '/Status/{print $6}')
    do
	raid_detected=1
	echo -n "cciss status $status. "
	if [ "$status" != 'ok' ]
	then
	    rc=2
	fi
    done
fi

# hpsa support with hpacucli
if [ -f /proc/modules ] && grep -wFq hpsa /proc/modules && ! [ -d /dev/cciss/ ]
then
    if ! which hpacucli >/dev/null
    then
	echo "$0: unable to find hpacucli"
	exit 2
    fi

    for status in $(hpacucli ctrl all show status \
	| awk '/Controller Status:/ {print $3}')
    do
	raid_detected=1
	echo -n "hpacucli status $status. "
	if [ "$status" != 'OK' ]
	then
	    rc=2
	fi
    done
fi

if [ "$raid_detected" != 1 ]
then
    rc=2
    echo -n "Unable to detect RAID"
fi

echo
exit $rc
