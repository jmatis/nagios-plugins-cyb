#!/usr/bin/python

import os
import re
import sys
sys.path.append('/usr/local/lib/python2.7/site-packages')
import pingdom
import ConfigParser
try:
    import simplejson as json
except ImportError:
    import json

# Default Pingdom credentials
PINGDOM_USERNAME = 'username'
PINGDOM_PASSWORD = 'password'
PINGDOM_APPKEY = 'appkey'
PINGDOM_CONTACTID = 323645

def auth():
    global PINGDOM_USERNAME
    global PINGDOM_PASSWORD
    global PINGDOM_APPKEY
    global PINGDOM_CONTACTID

    if len(sys.argv) != 3:
        print "Usage: check_pingdom <credentials file> <account>"
        sys.exit(1)
    else:
        if not os.path.isfile(sys.argv[1]):
            print "Problem : credentials file doesn't exist"
            sys.exit(1)
        else:
            #Read the credentials file
            configHandle = ConfigParser.RawConfigParser()
            configHandle.read(sys.argv[1])
            PINGDOM_USERNAME=configHandle.get(sys.argv[2],'id')
            PINGDOM_PASSWORD=configHandle.get(sys.argv[2],'pass')
            PINGDOM_APPKEY=configHandle.get(sys.argv[2],'apikey')
            PINGDOM_CONTACTID=configHandle.get(sys.argv[2],'contactid')
            try:
                return pingdom.Pingdom(username=PINGDOM_USERNAME, password=PINGDOM_PASSWORD, appkey=PINGDOM_APPKEY)
            except Exception, err:
                print(str(err)+"\n")
                sys.exit(1)

def validate_id(ident):
    ident = str(ident)
    matchObj = re.match(r"^\d+$", ident)

    if matchObj:
        return True
    else:
        print "Invalid id: %s" % ident
        return False


def pingdom_api_call(command, method, params=None):
    if params != None and not(isinstance(params, dict)):
        try:
            params = json.loads(str(params))
        except ValueError, err:
            err_msg = str(err) + ": %s\n" % params
            print(err_msg)
            sys.exit(1)
        
    try:
        res = pingdom_connection.method(command, method, params)
        return res
    except Exception, err:
        print(str(err)+"\n")
        print err.read()
        sys.exit(1)


# First, we authenticate
pingdom_connection = auth()
# Then we fetch all check results, all probes should be there but not all needed infos
checks = pingdom_api_call("checks", "GET")
for check in checks['checks']:
    if not validate_id(check['id']):
        continue

    # If this probe is OK, go to next probe
    if check['status'] == "up" or check['status'] == "paused":
        continue

    # Else we get more infos of this probe
    res = pingdom_api_call("checks/" + str(check['id']), "GET")
    display=0
    name=res['check']['name']
    hostname=res['check']['hostname']
    # Check if defined contact ID is linked to this probe
    try:
        contactids=res['check']['contactids']
        if contactids.count(int(PINGDOM_CONTACTID)) > 0:
            display=1
    except:
        pass

    if display:
        print "CRITICAL: " + hostname + " (" + name + ")  is down"
        sys.exit(2)

print "All sites seem OK"
